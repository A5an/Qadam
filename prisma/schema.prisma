generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  chatId        String          @unique
  email         String?         @unique
  password      String?
  username      String?
  firstName     String?
  lastName      String?
  qadamcoin     Int?
  energy        Int?
  completedpracteces    Int?
  level         Int?            @default(0)
  isNew         Boolean?        @default(true)
  role          UserRole        @default(USER)
  loops         Loop[]
  likes         Like[]
  stars         Star[]
  courses       Course[]
  comments      Comment[]
  lessonComment LessonComment[]
}

model LessonComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
}

model Star {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
}

model Loop {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  content   String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  loop      Loop     @relation(fields: [loopId], references: [id], onDelete: Cascade)
  loopId    String
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  loop      Loop     @relation(fields: [loopId], references: [id], onDelete: Cascade)
  loopId    String
}

model Course {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  stars       Star[]
  lessons     Lesson[]
}

model Lesson {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  title          String
  content        String?
  course         Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String
  lessonComments LessonComment[]
}

enum UserRole {
  ORGANIZATION
  TEACHER
  USER
}
